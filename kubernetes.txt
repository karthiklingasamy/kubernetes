Kubernetes Architecture
--------------------------
1. Nodes - Node is a machine which is physical or virtual on which kubernetes is installed. Nodes is a worker machine 
that is where containes will be launched by kubernetes

2. Cluster - A cluster is a set of nodes grouped together. This way even if one node fails you have your application
still accessible from other nodes. Moreover having multiple nodes helps in sharing load as well

3. Master - Who is responsoble for managing the cluster?
          - where is the information about members of the cluster stored?
          - How are the nodes monitored?
          - when the node fails how do you move the workload of the failed node to another worker node?

Thats where the master comes in. The master is another node with kubernetes installed in it and is configured as a Master
The master watches over the nodes in the cluster and is responsible for the actual orchestration of containers on the worker
nodes.

Kubernetes Components
---------------------
1. API Server
2. etcd key store servises
3. kubelet services
4. Container Runtime
5. Controller
6. Scheduler

API Server
----------
The API server act as a frontend of kubernetes. The users,managements devices,commandline interface all talk to the 
API server to interact with kunernetes cluster

etcd key store 
--------------
etcd is a distributed reliable key value store used by kubernetes to store all data used to manage the cluser.
Think of it this way when you have multiple nodes and masters in your cluster etcd stores all the information
on all the nodes in the cluster in a distributed manner. etcd is responsible for implementing locks within 
the cluster to ensure that there are no conflicts between the masters. 

Schedulers
----------
The schedulers is responsible for distributing work or containers across multiple nodes. It looks for newly
created containers and assigns them to nodes

Controllers
------------
The controllers are the brain behind the orchestration. They are responsible for noticing and responding when nodes,
containers or end points goes down. The controllers make decisions to bring up new containers in such cases.

Container Runtime
------------------
The container runtime is the underlying software that is used to run containers. In our case it happens to be docker
But there are other options as well. 

Kublet
-------
Kublet is the agent that runs on each node in the cluster. Tha agent is responsible for making sure the conatiners
are running on the node as expected

So for we saw two type of servers. Master and Worker and set of components that make up Kubernetes

Master & Worker Nodes
-----------------------
How does one server become a master and another server become a slave/worker?

The worker node is where the containers is hosted. For example, Docker containers. And to run docker container
runtime installed and that's where the container runtime falls. In this case it happens to be docker.
This doesn't to be docker there are other container runtime alternatives such as Rocket or Cryo.
But throughout this course we use docker container runtime engine.

PODS (2 Type of pods 1. Stanalone pods or replicaset pods)
-----
YAML in kubernetes
4 Tob level Properties

1. apiversion
2. kind
3. metadata
4. spec

To create pod using run command
--------------------------------------------
> kubectl run nginix --image=nginx

To create a pod using yaml
----------------------------------
> kubectl create -f pod-definition.yml
> kubectl apply  -f pod-definition.yml

To see list of pods
----------------------
>kubectl get pods

To see detail info about the pod
----------------------------------
> kubectl describe pod myapp-pod (You can comapre the result with kubernetes GUI)
> kubectl describe pod newpods-bcvm4 | grep -i images

To see which node are these pods place on
--------------------------------------------------------
> kubectl get pods -o wide

To edit the pod
--------------------
> kubectl edit pod redis
> update the pod-definition file and use kubectl apply


Note : The below cmd i get from  Excersis video

This command is used to do smoke test. It will not creat pods but create the yaml file
> kubectl run redis --image=redis123 --dry-run=client -o yaml >pod.yaml

Change the image name from redis123 to redis and run the below cmd

> kubectl apply -f pod.yaml

To delete the pod
-------------------------
> kubectl delete pod webapp

kubernetes controllers
--------------------------------
Controllers are the brain behind kubernetes. They are the processes monitor the kuberneted objects and respons accordingly. 
1. Replication Controller

   What is replica and why do we need replication controller?
   The replication controller help us to run multiple instance of the single pod in the kubernetes cluster this providing high availability

   Does that mean you can't use replication controller if you plan to use single  pod ?
   No. Even if you have a single pod the replication controller can help by automatically bring up new pod when the existing one fails
   Thus the replication controllers ensures the specified number of pods are running all the time even it 1 or 100

   Load Balancing & Scaling ?
    Another reasion we need replication controller to create multiple pods and sharing the load across them. 
    The replication controller span across multiple nodes in the cluster and it helps us balance the load across multiple pods on different nodes
    as well as scale our application when the demand increases


Replication Controller Vs Replication set
-----------------------------------------------------
Both have the same purpose but they are not same. Replication controller is a older technologi is replaced by replica set.  So the replica set is 
the new recomented way to set our replication. However whatever we discussed in our previous slides is applicable to both the technologied

Replica set are ensure always the required number of pods are running. If one pod is deleted it create new pod automatically the defined 
number of pods are always on the cluster

Replicaset: (Three major section template-->replica---->selector)
---------------
apiVersion: apps/v1
kind: Replicaset
metadata:
  name: myapp-Replicaset
  labels:
    app: myapp
    type:  front-end
spec:
  template: ----------------------------------------------------------------------------------section 1
    metadata:
    name: myapp-pod
    labels:
      app: myapp 
      type: front-end
    spec:
      containers:
      - name: nginx-container
        image: nginx
  replicas: 3 ----------------------------------------------------------------------------------section 2
  selector:    -----------------------------------------------------------------------------------section 3
    matchLabels: 
      type: front-end

  Note: The replica set can also manage pods that were not created as part of replicaset creation. So the selector is the one of the major difference 
            between the Replica Set Vs Replica Controller

> kubectl create -f replicaset-definition.yml
> kubectl get replicaset
> kubectl get pods

Labels & Selectors
--------------------------
why do we label pods and object in kubernetes?
If you label the pod this way then the replica set know to monitore

Scale
------
How we scale the Replica Set ?
Let assume we started with 3 replicas and future we decide to scale 6. How do we update our replica set sacle to 6 replicas?

option 1: update the replica set definition file
> kubectl replace -f replicaset-definition.yml
option 2: run kubectrl scale command use the replicas parameter to provide new number of replica and specify the same file as input
> kubectl scale --replicas=6 -f replicaset-definition.yml
> kubectl scale --replicas=6 replicaset myapp-replicaset

Note: There is aslo options available automatically increase the replaset based on load that is advace topic

commands
---------------
> kubectrl create -f replicaset-definition.yml
> kubectl get replicaset
> kubctl get pods
> kubectl delete replicaset myapp-replicaset (Also deletes all underlying PODs)
> kubectl replace -f  replicaset-definition.yml
> kubectl sacle -replicaset=6 -f replicaset-definition.yml
> kubectl describe replicaset myapp-replicaset

what if more number of pods than the required?
Lets create more pods outside of replicaset using pod command with the label that the replicset selector users
Now look the status of the new pod is terminated. This is bcz the replica set terminating the new pod we just
created. Replica Set not allowing to create more pods with the same label than the number of replica specified
on the replicaset

How to update the replicaset?
what if we want to increase the replica to 4 instead of 3. We are trying to scale up our application. 
option 1
---------
> kubectl edit replicaset myapp-replicaset

when we run the above command it opens the runnung configuration of the replica set. This is not the 
actutal file we created. This is the temporary file kubernetes created in memory. It allow us to edit
the configureation object. Thats why you see additional details other than the one we provided.
Changes made to the files are directly applied on the running configuration of the cluster as soon as the 
file is saved

option 2
---------
> kubectl scale replicaset myap-replicaset --replicas=2

Now see the replica set is scaling down to 2 replica by terminating the two of the pods